datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

////////////////////////////////
// LOCATIONS
////////////////////////////////
model Location {
  id         Int                                 @id @default(autoincrement())
  lat        Float
  lng        Float
  geom       Unsupported("geometry(Point,4326)")
  zip        String
  address    String
  cityId     Int
  city       City                                @relation(fields: [cityId], references: [id])
  venues     Venue[]
  events     Event[]
  promotions Promotion[]

  @@index([cityId])
}

model CurrencyCode {
  id           Int           @id @default(autoincrement())
  currencyCode String
  countries    Country[]
  transactions Transaction[]
}

model Country {
  id             Int          @id @default(autoincrement())
  country        String
  isoCode        String
  currencyCodeId Int
  currencyCode   CurrencyCode @relation(fields: [currencyCodeId], references: [id])
  states         State[]
  cities         City[]
}

model State {
  id        Int     @id @default(autoincrement())
  state     String
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])
  cities    City[]
}

model City {
  id        Int        @id @default(autoincrement())
  city      String
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  stateId   Int?
  state     State?     @relation(fields: [stateId], references: [id])
  location  Location[]
}

////////////////////////////////
// Events
////////////////////////////////
model EventCategory {
  id            Int         @id @default(autoincrement())
  eventCategory String
  eventTypes    EventType[]
  events        Event[]
}

model EventType {
  id              Int            @id @default(autoincrement())
  eventType       String
  eventCategoryId Int?
  eventCategory   EventCategory? @relation(fields: [eventCategoryId], references: [id])
  events          Event[]        @relation("EventEventType")
  followedBy      Account[]      @relation("EventTypeFollowers")
  preferredBy     Account[]      @relation("AccountEventPreferences")
}

model Event {
  id              Int           @id @default(autoincrement())
  venueId         Int
  venue           Venue         @relation(fields: [venueId], references: [id])
  locationId      Int
  location        Location      @relation(fields: [locationId], references: [id])
  title           String
  headline        String
  description     String
  price           Float?
  startDate       DateTime
  endDate         DateTime
  image           String?
  eventCategoryId Int
  eventCategory   EventCategory @relation(fields: [eventCategoryId], references: [id])
  eventTypes      EventType[]   @relation("EventEventType")
  transactions    Transaction[]
  tickets         Ticket[]

  @@index([locationId])
}

////////////////////////////////
// PROMOTIONS
////////////////////////////////
model PromotionCategory {
  id                Int             @id @default(autoincrement())
  promotionCategory String
  promotionTypes    PromotionType[]
  promotions        Promotion[]
}

model PromotionType {
  id                  Int                @id @default(autoincrement())
  promotionType       String
  promotionCategoryId Int?
  promotionCategory   PromotionCategory? @relation(fields: [promotionCategoryId], references: [id])
  promotions          Promotion[]        @relation("PromotionPromotionType")
  followedBy          Account[]          @relation("PromotionTypeFollowers")
  preferredBy         Account[]          @relation("AccountPromoPreferences")
}

model Promotion {
  id                  Int               @id @default(autoincrement())
  venueId             Int
  venue               Venue             @relation(fields: [venueId], references: [id])
  locationId          Int
  location            Location          @relation(fields: [locationId], references: [id])
  title               String
  headline            String
  description         String
  price               Float?
  startDate           DateTime
  endDate             DateTime
  image               String?
  promotionCategoryId Int
  promotionCategory   PromotionCategory @relation(fields: [promotionCategoryId], references: [id])
  promotionTypes      PromotionType[]   @relation("PromotionPromotionType")

  @@index([locationId])
}

////////////////////////////////
// VENUES
////////////////////////////////
model VenueType {
  id          Int       @id @default(autoincrement())
  venueType   String
  venues      Venue[]   @relation("VenueTypeType")
  preferredBy Account[] @relation("AccountVenuePreferences")
}

model Venue {
  id          Int         @id @default(autoincrement())
  locationId  Int
  location    Location    @relation(fields: [locationId], references: [id])
  name        String
  address     String
  websiteUrl  String?
  description String?
  image       String?
  phoneNumber String?
  email       String?
  events      Event[]
  promotions  Promotion[]
  venueTypes  VenueType[] @relation("VenueTypeType")
  followers   Account[]   @relation("VenueFollowers")

  @@index([locationId])
}

////////////////////////////////
// ACCOUNT
////////////////////////////////
model PermissionFor {
  id            Int              @id @default(autoincrement())
  permissionFor String
  permissions   UserPermission[]
}

model PermissionType {
  id             Int              @id @default(autoincrement())
  permissionType String
  permissions    UserPermission[]
}

model UserPermission {
  id               Int            @id @default(autoincrement())
  accountId        Int
  account          Account        @relation(fields: [accountId], references: [id])
  permissionForId  Int
  permissionFor    PermissionFor  @relation(fields: [permissionForId], references: [id])
  permissionTypeId Int
  permissionType   PermissionType @relation(fields: [permissionTypeId], references: [id])
}

model NotificationType {
  id              Int                @id @default(autoincrement())
  notifcationType String
  notifications   UserNotification[]
}

model NotificationFor {
  id              Int                @id @default(autoincrement())
  notificationFor String
  notifications   UserNotification[]
}

model UserNotification {
  id                 Int              @id @default(autoincrement())
  accountId          Int
  account            Account          @relation(fields: [accountId], references: [id])
  notificationForId  Int
  notificationFor    NotificationFor  @relation(fields: [notificationForId], references: [id])
  notificationTypeId Int
  notificationType   NotificationType @relation(fields: [notificationTypeId], references: [id])
}

model LinkedAccountType {
  id                Int             @id @default(autoincrement())
  linkedAccountType String
  linkedAccounts    LinkedAccount[]
}

model LinkedAccount {
  id                  Int               @id @default(autoincrement())
  accountId           Int
  account             Account           @relation(fields: [accountId], references: [id])
  linkedAccountTypeId Int
  linkedAccountType   LinkedAccountType @relation(fields: [linkedAccountTypeId], references: [id])
  externalId          String
  displayName         String
  profileUrl          String
  linkedAt            DateTime          @default(now())
}

model PaymentMethod {
  id            Int           @id @default(autoincrement())
  paymentMethod String
  transactions  Transaction[]
}

model PaymentStatus {
  id            Int           @id @default(autoincrement())
  paymentStatus String
  transactions  Transaction[]
}

model Transaction {
  id              Int           @id @default(autoincrement())
  accountId       Int
  account         Account       @relation(fields: [accountId], references: [id])
  eventId         Int?
  event           Event?        @relation(fields: [eventId], references: [id])
  currencyCodeId  Int
  currencyCode    CurrencyCode  @relation(fields: [currencyCodeId], references: [id])
  transactionDate DateTime      @default(now())
  description     String
  paymentMethodId Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentStatusId Int
  paymentStatus   PaymentStatus @relation(fields: [paymentStatusId], references: [id])
  tickets         Ticket[]
}

model Account {
  id                      Int                @id @default(autoincrement())
  password                String
  phoneNumber             String
  name                    String
  dateOfBirth             DateTime
  email                   String?
  profileImage            String?
  createdAt               DateTime           @default(now())
  followingVenues         Venue[]            @relation("VenueFollowers")
  followingEventTypes     EventType[]        @relation("EventTypeFollowers")
  followingPromotionTypes PromotionType[]    @relation("PromotionTypeFollowers")
  venuePreferences        VenueType[]        @relation("AccountVenuePreferences")
  eventPreferences        EventType[]        @relation("AccountEventPreferences")
  promoPreferences        PromotionType[]    @relation("AccountPromoPreferences")
  linkedAccounts          LinkedAccount[]
  notifications           UserNotification[]
  permissions             UserPermission[]
  transactions            Transaction[]
  tickets                 Ticket[]
  isValidated             Boolean
  twoFactorSecret         String
  twoFactorEnabled        Boolean
  twoFactorValidated      Boolean
}

model Ticket {
  id            Int         @id @default(autoincrement())
  uuid          String      @default(uuid())
  accountId     Int
  account       Account     @relation(fields: [accountId], references: [id])
  eventId       Int
  event         Event       @relation(fields: [eventId], references: [id])
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}
